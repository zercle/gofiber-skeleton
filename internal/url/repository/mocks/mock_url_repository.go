// Code generated by MockGen. DO NOT EDIT.
// Source: url_repository.go
//
// Generated by this command:
//
//	mockgen -source=url_repository.go -destination=mocks/mock_url_repository.go -package=mocks URLRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	url "gofiber-skeleton/internal/url"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockURLRepository is a mock of URLRepository interface.
type MockURLRepository struct {
	ctrl     *gomock.Controller
	recorder *MockURLRepositoryMockRecorder
	isgomock struct{}
}

// MockURLRepositoryMockRecorder is the mock recorder for MockURLRepository.
type MockURLRepositoryMockRecorder struct {
	mock *MockURLRepository
}

// NewMockURLRepository creates a new mock instance.
func NewMockURLRepository(ctrl *gomock.Controller) *MockURLRepository {
	mock := &MockURLRepository{ctrl: ctrl}
	mock.recorder = &MockURLRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLRepository) EXPECT() *MockURLRepositoryMockRecorder {
	return m.recorder
}

// CreateURL mocks base method.
func (m *MockURLRepository) CreateURL(ctx context.Context, arg1 *url.URL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateURL", ctx, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateURL indicates an expected call of CreateURL.
func (mr *MockURLRepositoryMockRecorder) CreateURL(ctx, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateURL", reflect.TypeOf((*MockURLRepository)(nil).CreateURL), ctx, arg1)
}

// GetURLByID mocks base method.
func (m *MockURLRepository) GetURLByID(ctx context.Context, id uuid.UUID) (*url.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURLByID", ctx, id)
	ret0, _ := ret[0].(*url.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURLByID indicates an expected call of GetURLByID.
func (mr *MockURLRepositoryMockRecorder) GetURLByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURLByID", reflect.TypeOf((*MockURLRepository)(nil).GetURLByID), ctx, id)
}

// GetURLByShortCode mocks base method.
func (m *MockURLRepository) GetURLByShortCode(ctx context.Context, shortCode string) (*url.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURLByShortCode", ctx, shortCode)
	ret0, _ := ret[0].(*url.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURLByShortCode indicates an expected call of GetURLByShortCode.
func (mr *MockURLRepositoryMockRecorder) GetURLByShortCode(ctx, shortCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURLByShortCode", reflect.TypeOf((*MockURLRepository)(nil).GetURLByShortCode), ctx, shortCode)
}
