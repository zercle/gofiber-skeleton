// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: url.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createURL = `-- name: CreateURL :one
INSERT INTO urls (original_url, short_code, user_id, expires_at) VALUES ($1, $2, $3, $4) RETURNING id, original_url, short_code, user_id, created_at, expires_at
`

type CreateURLParams struct {
	OriginalUrl string
	ShortCode   string
	UserID      pgtype.UUID
	ExpiresAt   pgtype.Timestamptz
}

func (q *Queries) CreateURL(ctx context.Context, arg CreateURLParams) (Url, error) {
	row := q.db.QueryRow(ctx, createURL,
		arg.OriginalUrl,
		arg.ShortCode,
		arg.UserID,
		arg.ExpiresAt,
	)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.OriginalUrl,
		&i.ShortCode,
		&i.UserID,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const deleteURL = `-- name: DeleteURL :exec
DELETE FROM urls WHERE id = $1
`

func (q *Queries) DeleteURL(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteURL, id)
	return err
}

const getURLByID = `-- name: GetURLByID :one
SELECT id, original_url, short_code, user_id, created_at, expires_at FROM urls WHERE id = $1
`

func (q *Queries) GetURLByID(ctx context.Context, id pgtype.UUID) (Url, error) {
	row := q.db.QueryRow(ctx, getURLByID, id)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.OriginalUrl,
		&i.ShortCode,
		&i.UserID,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const getURLByShortCode = `-- name: GetURLByShortCode :one
SELECT id, original_url, short_code, user_id, created_at, expires_at FROM urls WHERE short_code = $1
`

func (q *Queries) GetURLByShortCode(ctx context.Context, shortCode string) (Url, error) {
	row := q.db.QueryRow(ctx, getURLByShortCode, shortCode)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.OriginalUrl,
		&i.ShortCode,
		&i.UserID,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const getURLsByUserID = `-- name: GetURLsByUserID :many
SELECT id, original_url, short_code, user_id, created_at, expires_at FROM urls WHERE user_id = $1
`

func (q *Queries) GetURLsByUserID(ctx context.Context, userID pgtype.UUID) ([]Url, error) {
	rows, err := q.db.Query(ctx, getURLsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Url
	for rows.Next() {
		var i Url
		if err := rows.Scan(
			&i.ID,
			&i.OriginalUrl,
			&i.ShortCode,
			&i.UserID,
			&i.CreatedAt,
			&i.ExpiresAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateURL = `-- name: UpdateURL :one
UPDATE urls SET original_url = $2 WHERE id = $1 RETURNING id, original_url, short_code, user_id, created_at, expires_at
`

type UpdateURLParams struct {
	ID          pgtype.UUID
	OriginalUrl string
}

func (q *Queries) UpdateURL(ctx context.Context, arg UpdateURLParams) (Url, error) {
	row := q.db.QueryRow(ctx, updateURL, arg.ID, arg.OriginalUrl)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.OriginalUrl,
		&i.ShortCode,
		&i.UserID,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}
