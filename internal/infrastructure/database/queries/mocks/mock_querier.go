// Code generated by MockGen. DO NOT EDIT.
// Source: internal/infrastructure/database/queries/querier.go
//
// Generated by this command:
//
//	mockgen -source=internal/infrastructure/database/queries/querier.go -destination=internal/infrastructure/database/queries/mocks/mock_querier.go
//

// Package mock_database is a generated GoMock package.
package mock_database

import (
	context "context"
	reflect "reflect"

	pgtype "github.com/jackc/pgx/v5/pgtype"
	database "github.com/zercle/gofiber-skeleton/internal/infrastructure/database/queries"
	gomock "go.uber.org/mock/gomock"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
	isgomock struct{}
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// CreatePost mocks base method.
func (m *MockQuerier) CreatePost(ctx context.Context, arg database.CreatePostParams) (database.Posts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", ctx, arg)
	ret0, _ := ret[0].(database.Posts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockQuerierMockRecorder) CreatePost(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockQuerier)(nil).CreatePost), ctx, arg)
}

// CreateUser mocks base method.
func (m *MockQuerier) CreateUser(ctx context.Context, arg database.CreateUserParams) (database.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, arg)
	ret0, _ := ret[0].(database.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockQuerierMockRecorder) CreateUser(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockQuerier)(nil).CreateUser), ctx, arg)
}

// DeactivateUser mocks base method.
func (m *MockQuerier) DeactivateUser(ctx context.Context, id pgtype.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeactivateUser", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeactivateUser indicates an expected call of DeactivateUser.
func (mr *MockQuerierMockRecorder) DeactivateUser(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivateUser", reflect.TypeOf((*MockQuerier)(nil).DeactivateUser), ctx, id)
}

// DeletePost mocks base method.
func (m *MockQuerier) DeletePost(ctx context.Context, id pgtype.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockQuerierMockRecorder) DeletePost(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockQuerier)(nil).DeletePost), ctx, id)
}

// GetPostByID mocks base method.
func (m *MockQuerier) GetPostByID(ctx context.Context, id pgtype.UUID) (database.GetPostByIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostByID", ctx, id)
	ret0, _ := ret[0].(database.GetPostByIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostByID indicates an expected call of GetPostByID.
func (mr *MockQuerierMockRecorder) GetPostByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostByID", reflect.TypeOf((*MockQuerier)(nil).GetPostByID), ctx, id)
}

// GetPostBySlug mocks base method.
func (m *MockQuerier) GetPostBySlug(ctx context.Context, slug string) (database.GetPostBySlugRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostBySlug", ctx, slug)
	ret0, _ := ret[0].(database.GetPostBySlugRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostBySlug indicates an expected call of GetPostBySlug.
func (mr *MockQuerierMockRecorder) GetPostBySlug(ctx, slug any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostBySlug", reflect.TypeOf((*MockQuerier)(nil).GetPostBySlug), ctx, slug)
}

// GetUserByEmail mocks base method.
func (m *MockQuerier) GetUserByEmail(ctx context.Context, email string) (database.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(database.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockQuerierMockRecorder) GetUserByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockQuerier)(nil).GetUserByEmail), ctx, email)
}

// GetUserByID mocks base method.
func (m *MockQuerier) GetUserByID(ctx context.Context, id pgtype.UUID) (database.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(database.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockQuerierMockRecorder) GetUserByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockQuerier)(nil).GetUserByID), ctx, id)
}

// ListPosts mocks base method.
func (m *MockQuerier) ListPosts(ctx context.Context, arg database.ListPostsParams) ([]database.ListPostsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPosts", ctx, arg)
	ret0, _ := ret[0].([]database.ListPostsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPosts indicates an expected call of ListPosts.
func (mr *MockQuerierMockRecorder) ListPosts(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPosts", reflect.TypeOf((*MockQuerier)(nil).ListPosts), ctx, arg)
}

// ListPostsByUser mocks base method.
func (m *MockQuerier) ListPostsByUser(ctx context.Context, arg database.ListPostsByUserParams) ([]database.Posts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPostsByUser", ctx, arg)
	ret0, _ := ret[0].([]database.Posts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPostsByUser indicates an expected call of ListPostsByUser.
func (mr *MockQuerierMockRecorder) ListPostsByUser(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPostsByUser", reflect.TypeOf((*MockQuerier)(nil).ListPostsByUser), ctx, arg)
}

// ListUsers mocks base method.
func (m *MockQuerier) ListUsers(ctx context.Context, arg database.ListUsersParams) ([]database.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", ctx, arg)
	ret0, _ := ret[0].([]database.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockQuerierMockRecorder) ListUsers(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockQuerier)(nil).ListUsers), ctx, arg)
}

// PublishPost mocks base method.
func (m *MockQuerier) PublishPost(ctx context.Context, id pgtype.UUID) (database.Posts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishPost", ctx, id)
	ret0, _ := ret[0].(database.Posts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishPost indicates an expected call of PublishPost.
func (mr *MockQuerierMockRecorder) PublishPost(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishPost", reflect.TypeOf((*MockQuerier)(nil).PublishPost), ctx, id)
}

// UnpublishPost mocks base method.
func (m *MockQuerier) UnpublishPost(ctx context.Context, id pgtype.UUID) (database.Posts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnpublishPost", ctx, id)
	ret0, _ := ret[0].(database.Posts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnpublishPost indicates an expected call of UnpublishPost.
func (mr *MockQuerierMockRecorder) UnpublishPost(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnpublishPost", reflect.TypeOf((*MockQuerier)(nil).UnpublishPost), ctx, id)
}

// UpdatePost mocks base method.
func (m *MockQuerier) UpdatePost(ctx context.Context, arg database.UpdatePostParams) (database.Posts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePost", ctx, arg)
	ret0, _ := ret[0].(database.Posts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePost indicates an expected call of UpdatePost.
func (mr *MockQuerierMockRecorder) UpdatePost(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePost", reflect.TypeOf((*MockQuerier)(nil).UpdatePost), ctx, arg)
}

// UpdateUser mocks base method.
func (m *MockQuerier) UpdateUser(ctx context.Context, arg database.UpdateUserParams) (database.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, arg)
	ret0, _ := ret[0].(database.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockQuerierMockRecorder) UpdateUser(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockQuerier)(nil).UpdateUser), ctx, arg)
}

// UpdateUserLastLogin mocks base method.
func (m *MockQuerier) UpdateUserLastLogin(ctx context.Context, id pgtype.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserLastLogin", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserLastLogin indicates an expected call of UpdateUserLastLogin.
func (mr *MockQuerierMockRecorder) UpdateUserLastLogin(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserLastLogin", reflect.TypeOf((*MockQuerier)(nil).UpdateUserLastLogin), ctx, id)
}
