// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: posts.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (user_id, title, content, slug)
VALUES ($1, $2, $3, $4)
RETURNING id, user_id, title, content, slug, is_published, published_at, created_at, updated_at
`

type CreatePostParams struct {
	UserID  pgtype.UUID `json:"user_id"`
	Title   string      `json:"title"`
	Content pgtype.Text `json:"content"`
	Slug    string      `json:"slug"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Posts, error) {
	row := q.db.QueryRow(ctx, createPost,
		arg.UserID,
		arg.Title,
		arg.Content,
		arg.Slug,
	)
	var i Posts
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.Slug,
		&i.IsPublished,
		&i.PublishedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM posts
WHERE id = $1
`

func (q *Queries) DeletePost(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deletePost, id)
	return err
}

const getPostByID = `-- name: GetPostByID :one
SELECT 
    p.id, p.user_id, p.title, p.content, p.slug, p.is_published, p.published_at, p.created_at, p.updated_at,
    u.email as author_email,
    u.first_name as author_first_name,
    u.last_name as author_last_name
FROM posts p
JOIN users u ON p.user_id = u.id
WHERE p.id = $1
`

type GetPostByIDRow struct {
	ID              pgtype.UUID        `json:"id"`
	UserID          pgtype.UUID        `json:"user_id"`
	Title           string             `json:"title"`
	Content         pgtype.Text        `json:"content"`
	Slug            string             `json:"slug"`
	IsPublished     pgtype.Bool        `json:"is_published"`
	PublishedAt     pgtype.Timestamptz `json:"published_at"`
	CreatedAt       pgtype.Timestamptz `json:"created_at"`
	UpdatedAt       pgtype.Timestamptz `json:"updated_at"`
	AuthorEmail     string             `json:"author_email"`
	AuthorFirstName string             `json:"author_first_name"`
	AuthorLastName  string             `json:"author_last_name"`
}

func (q *Queries) GetPostByID(ctx context.Context, id pgtype.UUID) (GetPostByIDRow, error) {
	row := q.db.QueryRow(ctx, getPostByID, id)
	var i GetPostByIDRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.Slug,
		&i.IsPublished,
		&i.PublishedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AuthorEmail,
		&i.AuthorFirstName,
		&i.AuthorLastName,
	)
	return i, err
}

const getPostBySlug = `-- name: GetPostBySlug :one
SELECT 
    p.id, p.user_id, p.title, p.content, p.slug, p.is_published, p.published_at, p.created_at, p.updated_at,
    u.email as author_email,
    u.first_name as author_first_name,
    u.last_name as author_last_name
FROM posts p
JOIN users u ON p.user_id = u.id
WHERE p.slug = $1
`

type GetPostBySlugRow struct {
	ID              pgtype.UUID        `json:"id"`
	UserID          pgtype.UUID        `json:"user_id"`
	Title           string             `json:"title"`
	Content         pgtype.Text        `json:"content"`
	Slug            string             `json:"slug"`
	IsPublished     pgtype.Bool        `json:"is_published"`
	PublishedAt     pgtype.Timestamptz `json:"published_at"`
	CreatedAt       pgtype.Timestamptz `json:"created_at"`
	UpdatedAt       pgtype.Timestamptz `json:"updated_at"`
	AuthorEmail     string             `json:"author_email"`
	AuthorFirstName string             `json:"author_first_name"`
	AuthorLastName  string             `json:"author_last_name"`
}

func (q *Queries) GetPostBySlug(ctx context.Context, slug string) (GetPostBySlugRow, error) {
	row := q.db.QueryRow(ctx, getPostBySlug, slug)
	var i GetPostBySlugRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.Slug,
		&i.IsPublished,
		&i.PublishedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AuthorEmail,
		&i.AuthorFirstName,
		&i.AuthorLastName,
	)
	return i, err
}

const listPosts = `-- name: ListPosts :many
SELECT 
    p.id, p.user_id, p.title, p.content, p.slug, p.is_published, p.published_at, p.created_at, p.updated_at,
    u.email as author_email,
    u.first_name as author_first_name,
    u.last_name as author_last_name
FROM posts p
JOIN users u ON p.user_id = u.id
WHERE ($3::boolean IS NULL OR p.is_published = $3)
ORDER BY p.created_at DESC
LIMIT $1 OFFSET $2
`

type ListPostsParams struct {
	Limit   int32 `json:"limit"`
	Offset  int32 `json:"offset"`
	Column3 bool  `json:"column_3"`
}

type ListPostsRow struct {
	ID              pgtype.UUID        `json:"id"`
	UserID          pgtype.UUID        `json:"user_id"`
	Title           string             `json:"title"`
	Content         pgtype.Text        `json:"content"`
	Slug            string             `json:"slug"`
	IsPublished     pgtype.Bool        `json:"is_published"`
	PublishedAt     pgtype.Timestamptz `json:"published_at"`
	CreatedAt       pgtype.Timestamptz `json:"created_at"`
	UpdatedAt       pgtype.Timestamptz `json:"updated_at"`
	AuthorEmail     string             `json:"author_email"`
	AuthorFirstName string             `json:"author_first_name"`
	AuthorLastName  string             `json:"author_last_name"`
}

func (q *Queries) ListPosts(ctx context.Context, arg ListPostsParams) ([]ListPostsRow, error) {
	rows, err := q.db.Query(ctx, listPosts, arg.Limit, arg.Offset, arg.Column3)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListPostsRow
	for rows.Next() {
		var i ListPostsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Content,
			&i.Slug,
			&i.IsPublished,
			&i.PublishedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.AuthorEmail,
			&i.AuthorFirstName,
			&i.AuthorLastName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPostsByUser = `-- name: ListPostsByUser :many
SELECT id, user_id, title, content, slug, is_published, published_at, created_at, updated_at FROM posts
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListPostsByUserParams struct {
	UserID pgtype.UUID `json:"user_id"`
	Limit  int32       `json:"limit"`
	Offset int32       `json:"offset"`
}

func (q *Queries) ListPostsByUser(ctx context.Context, arg ListPostsByUserParams) ([]Posts, error) {
	rows, err := q.db.Query(ctx, listPostsByUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Posts
	for rows.Next() {
		var i Posts
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Content,
			&i.Slug,
			&i.IsPublished,
			&i.PublishedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const publishPost = `-- name: PublishPost :one
UPDATE posts
SET 
    is_published = true,
    published_at = NOW(),
    updated_at = NOW()
WHERE id = $1
RETURNING id, user_id, title, content, slug, is_published, published_at, created_at, updated_at
`

func (q *Queries) PublishPost(ctx context.Context, id pgtype.UUID) (Posts, error) {
	row := q.db.QueryRow(ctx, publishPost, id)
	var i Posts
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.Slug,
		&i.IsPublished,
		&i.PublishedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const unpublishPost = `-- name: UnpublishPost :one
UPDATE posts
SET 
    is_published = false,
    published_at = NULL,
    updated_at = NOW()
WHERE id = $1
RETURNING id, user_id, title, content, slug, is_published, published_at, created_at, updated_at
`

func (q *Queries) UnpublishPost(ctx context.Context, id pgtype.UUID) (Posts, error) {
	row := q.db.QueryRow(ctx, unpublishPost, id)
	var i Posts
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.Slug,
		&i.IsPublished,
		&i.PublishedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePost = `-- name: UpdatePost :one
UPDATE posts
SET 
    title = COALESCE($2, title),
    content = COALESCE($3, content),
    slug = COALESCE($4, slug),
    updated_at = NOW()
WHERE id = $1
RETURNING id, user_id, title, content, slug, is_published, published_at, created_at, updated_at
`

type UpdatePostParams struct {
	ID      pgtype.UUID `json:"id"`
	Title   string      `json:"title"`
	Content pgtype.Text `json:"content"`
	Slug    string      `json:"slug"`
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (Posts, error) {
	row := q.db.QueryRow(ctx, updatePost,
		arg.ID,
		arg.Title,
		arg.Content,
		arg.Slug,
	)
	var i Posts
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.Slug,
		&i.IsPublished,
		&i.PublishedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
