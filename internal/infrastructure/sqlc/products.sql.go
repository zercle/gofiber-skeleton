// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: products.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (name, description, price, stock, image_url)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, name, description, price, stock, image_url, created_at, updated_at
`

type CreateProductParams struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	Price       string         `json:"price"`
	Stock       int32          `json:"stock"`
	ImageUrl    sql.NullString `json:"image_url"`
}

func (q *Queries) CreateProduct(ctx context.Context, db DBTX, arg CreateProductParams) (Product, error) {
	row := db.QueryRowContext(ctx, createProduct,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.Stock,
		arg.ImageUrl,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Stock,
		&i.ImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, db DBTX, id uuid.UUID) error {
	_, err := db.ExecContext(ctx, deleteProduct, id)
	return err
}

const getAllProducts = `-- name: GetAllProducts :many
SELECT id, name, description, price, stock, image_url, created_at, updated_at FROM products ORDER BY created_at DESC
`

func (q *Queries) GetAllProducts(ctx context.Context, db DBTX) ([]Product, error) {
	rows, err := db.QueryContext(ctx, getAllProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.Stock,
			&i.ImageUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductByID = `-- name: GetProductByID :one
SELECT id, name, description, price, stock, image_url, created_at, updated_at FROM products WHERE id = $1
`

func (q *Queries) GetProductByID(ctx context.Context, db DBTX, id uuid.UUID) (Product, error) {
	row := db.QueryRowContext(ctx, getProductByID, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Stock,
		&i.ImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products 
SET name = $2, description = $3, price = $4, stock = $5, image_url = $6, updated_at = NOW()
WHERE id = $1
RETURNING id, name, description, price, stock, image_url, created_at, updated_at
`

type UpdateProductParams struct {
	ID          uuid.UUID      `json:"id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	Price       string         `json:"price"`
	Stock       int32          `json:"stock"`
	ImageUrl    sql.NullString `json:"image_url"`
}

func (q *Queries) UpdateProduct(ctx context.Context, db DBTX, arg UpdateProductParams) (Product, error) {
	row := db.QueryRowContext(ctx, updateProduct,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.Stock,
		arg.ImageUrl,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Stock,
		&i.ImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateProductStock = `-- name: UpdateProductStock :one
UPDATE products 
SET stock = stock + $2, updated_at = NOW()
WHERE id = $1
RETURNING id, name, description, price, stock, image_url, created_at, updated_at
`

type UpdateProductStockParams struct {
	ID    uuid.UUID `json:"id"`
	Stock int32     `json:"stock"`
}

func (q *Queries) UpdateProductStock(ctx context.Context, db DBTX, arg UpdateProductStockParams) (Product, error) {
	row := db.QueryRowContext(ctx, updateProductStock, arg.ID, arg.Stock)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Stock,
		&i.ImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
