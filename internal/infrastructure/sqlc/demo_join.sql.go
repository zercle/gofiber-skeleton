// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: demo_join.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const getOrdersWithItemsAndProducts = `-- name: GetOrdersWithItemsAndProducts :many
SELECT
    o.id AS order_id,
    o.user_id,
    o.status AS order_status,
    o.total AS order_total,
    o.created_at AS order_created_at,
    oi.id AS order_item_id,
    oi.product_id,
    oi.quantity,
    oi.price AS item_price,
    p.name AS product_name,
    p.description AS product_description,
    p.price AS product_unit_price,
    p.stock AS product_stock,
    p.image_url AS product_image_url
FROM orders o
JOIN order_items oi ON o.id = oi.order_id
JOIN products p ON oi.product_id = p.id
ORDER BY o.created_at DESC
`

type GetOrdersWithItemsAndProductsRow struct {
	OrderID            uuid.UUID      `json:"order_id"`
	UserID             uuid.UUID      `json:"user_id"`
	OrderStatus        string         `json:"order_status"`
	OrderTotal         string         `json:"order_total"`
	OrderCreatedAt     sql.NullTime   `json:"order_created_at"`
	OrderItemID        uuid.UUID      `json:"order_item_id"`
	ProductID          uuid.UUID      `json:"product_id"`
	Quantity           int32          `json:"quantity"`
	ItemPrice          string         `json:"item_price"`
	ProductName        string         `json:"product_name"`
	ProductDescription sql.NullString `json:"product_description"`
	ProductUnitPrice   string         `json:"product_unit_price"`
	ProductStock       int32          `json:"product_stock"`
	ProductImageUrl    sql.NullString `json:"product_image_url"`
}

func (q *Queries) GetOrdersWithItemsAndProducts(ctx context.Context, db DBTX) ([]GetOrdersWithItemsAndProductsRow, error) {
	rows, err := db.QueryContext(ctx, getOrdersWithItemsAndProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetOrdersWithItemsAndProductsRow{}
	for rows.Next() {
		var i GetOrdersWithItemsAndProductsRow
		if err := rows.Scan(
			&i.OrderID,
			&i.UserID,
			&i.OrderStatus,
			&i.OrderTotal,
			&i.OrderCreatedAt,
			&i.OrderItemID,
			&i.ProductID,
			&i.Quantity,
			&i.ItemPrice,
			&i.ProductName,
			&i.ProductDescription,
			&i.ProductUnitPrice,
			&i.ProductStock,
			&i.ProductImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
