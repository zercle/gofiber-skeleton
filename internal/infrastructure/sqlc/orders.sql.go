// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: orders.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (user_id, status, total)
VALUES ($1, $2, $3)
RETURNING id, user_id, status, total, created_at, updated_at
`

type CreateOrderParams struct {
	UserID uuid.UUID `json:"user_id"`
	Status string    `json:"status"`
	Total  string    `json:"total"`
}

func (q *Queries) CreateOrder(ctx context.Context, db DBTX, arg CreateOrderParams) (Order, error) {
	row := db.QueryRowContext(ctx, createOrder, arg.UserID, arg.Status, arg.Total)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Status,
		&i.Total,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllOrders = `-- name: GetAllOrders :many
SELECT id, user_id, status, total, created_at, updated_at FROM orders ORDER BY created_at DESC
`

func (q *Queries) GetAllOrders(ctx context.Context, db DBTX) ([]Order, error) {
	rows, err := db.QueryContext(ctx, getAllOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Status,
			&i.Total,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrderByID = `-- name: GetOrderByID :one
SELECT id, user_id, status, total, created_at, updated_at FROM orders WHERE id = $1
`

func (q *Queries) GetOrderByID(ctx context.Context, db DBTX, id uuid.UUID) (Order, error) {
	row := db.QueryRowContext(ctx, getOrderByID, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Status,
		&i.Total,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrdersByUserID = `-- name: GetOrdersByUserID :many
SELECT id, user_id, status, total, created_at, updated_at FROM orders WHERE user_id = $1 ORDER BY created_at DESC
`

func (q *Queries) GetOrdersByUserID(ctx context.Context, db DBTX, userID uuid.UUID) ([]Order, error) {
	rows, err := db.QueryContext(ctx, getOrdersByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Status,
			&i.Total,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrder = `-- name: UpdateOrder :one
UPDATE orders 
SET user_id = $2, status = $3, total = $4, updated_at = NOW()
WHERE id = $1
RETURNING id, user_id, status, total, created_at, updated_at
`

type UpdateOrderParams struct {
	ID     uuid.UUID `json:"id"`
	UserID uuid.UUID `json:"user_id"`
	Status string    `json:"status"`
	Total  string    `json:"total"`
}

func (q *Queries) UpdateOrder(ctx context.Context, db DBTX, arg UpdateOrderParams) (Order, error) {
	row := db.QueryRowContext(ctx, updateOrder,
		arg.ID,
		arg.UserID,
		arg.Status,
		arg.Total,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Status,
		&i.Total,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateOrderStatus = `-- name: UpdateOrderStatus :one
UPDATE orders 
SET status = $2, updated_at = NOW()
WHERE id = $1
RETURNING id, user_id, status, total, created_at, updated_at
`

type UpdateOrderStatusParams struct {
	ID     uuid.UUID `json:"id"`
	Status string    `json:"status"`
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, db DBTX, arg UpdateOrderStatusParams) (Order, error) {
	row := db.QueryRowContext(ctx, updateOrderStatus, arg.ID, arg.Status)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Status,
		&i.Total,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
