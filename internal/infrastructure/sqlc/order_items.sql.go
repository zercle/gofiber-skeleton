// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: order_items.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createOrderItem = `-- name: CreateOrderItem :one
INSERT INTO order_items (order_id, product_id, quantity, price)
VALUES ($1, $2, $3, $4)
RETURNING id, order_id, product_id, quantity, price
`

type CreateOrderItemParams struct {
	OrderID   uuid.UUID `json:"order_id"`
	ProductID uuid.UUID `json:"product_id"`
	Quantity  int32     `json:"quantity"`
	Price     string    `json:"price"`
}

func (q *Queries) CreateOrderItem(ctx context.Context, db DBTX, arg CreateOrderItemParams) (OrderItem, error) {
	row := db.QueryRowContext(ctx, createOrderItem,
		arg.OrderID,
		arg.ProductID,
		arg.Quantity,
		arg.Price,
	)
	var i OrderItem
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.ProductID,
		&i.Quantity,
		&i.Price,
	)
	return i, err
}

const deleteOrderItem = `-- name: DeleteOrderItem :exec
DELETE FROM order_items WHERE id = $1
`

func (q *Queries) DeleteOrderItem(ctx context.Context, db DBTX, id uuid.UUID) error {
	_, err := db.ExecContext(ctx, deleteOrderItem, id)
	return err
}

const getOrderItemsByOrderID = `-- name: GetOrderItemsByOrderID :many
SELECT id, order_id, product_id, quantity, price FROM order_items WHERE order_id = $1
`

func (q *Queries) GetOrderItemsByOrderID(ctx context.Context, db DBTX, orderID uuid.UUID) ([]OrderItem, error) {
	rows, err := db.QueryContext(ctx, getOrderItemsByOrderID, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []OrderItem{}
	for rows.Next() {
		var i OrderItem
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.ProductID,
			&i.Quantity,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
