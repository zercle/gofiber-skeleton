// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: posts.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (
    user_id,
    thread_id,
    content
) VALUES (
    $1, $2, $3
)
RETURNING id, user_id, thread_id, content, created_at, updated_at
`

type CreatePostParams struct {
	UserID   uuid.UUID `json:"user_id"`
	ThreadID uuid.UUID `json:"thread_id"`
	Content  string    `json:"content"`
}

type CreatePostRow struct {
	ID        uuid.UUID    `json:"id"`
	UserID    uuid.UUID    `json:"user_id"`
	ThreadID  uuid.UUID    `json:"thread_id"`
	Content   string       `json:"content"`
	CreatedAt sql.NullTime `json:"created_at"`
	UpdatedAt sql.NullTime `json:"updated_at"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (CreatePostRow, error) {
	row := q.db.QueryRowContext(ctx, createPost, arg.UserID, arg.ThreadID, arg.Content)
	var i CreatePostRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ThreadID,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM posts WHERE id = $1
`

func (q *Queries) DeletePost(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deletePost, id)
	return err
}

const getPostByID = `-- name: GetPostByID :one
SELECT id, user_id, thread_id, content, created_at, updated_at
FROM posts
WHERE id = $1
LIMIT 1
`

type GetPostByIDRow struct {
	ID        uuid.UUID    `json:"id"`
	UserID    uuid.UUID    `json:"user_id"`
	ThreadID  uuid.UUID    `json:"thread_id"`
	Content   string       `json:"content"`
	CreatedAt sql.NullTime `json:"created_at"`
	UpdatedAt sql.NullTime `json:"updated_at"`
}

func (q *Queries) GetPostByID(ctx context.Context, id uuid.UUID) (GetPostByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getPostByID, id)
	var i GetPostByIDRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ThreadID,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listPostsByThread = `-- name: ListPostsByThread :many
SELECT id, user_id, thread_id, content, created_at, updated_at
FROM posts
WHERE thread_id = $1
ORDER BY created_at ASC
`

type ListPostsByThreadRow struct {
	ID        uuid.UUID    `json:"id"`
	UserID    uuid.UUID    `json:"user_id"`
	ThreadID  uuid.UUID    `json:"thread_id"`
	Content   string       `json:"content"`
	CreatedAt sql.NullTime `json:"created_at"`
	UpdatedAt sql.NullTime `json:"updated_at"`
}

func (q *Queries) ListPostsByThread(ctx context.Context, threadID uuid.UUID) ([]ListPostsByThreadRow, error) {
	rows, err := q.db.QueryContext(ctx, listPostsByThread, threadID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListPostsByThreadRow{}
	for rows.Next() {
		var i ListPostsByThreadRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ThreadID,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPostsByUser = `-- name: ListPostsByUser :many
SELECT id, user_id, thread_id, content, created_at, updated_at
FROM posts
WHERE user_id = $1
ORDER BY created_at DESC
`

type ListPostsByUserRow struct {
	ID        uuid.UUID    `json:"id"`
	UserID    uuid.UUID    `json:"user_id"`
	ThreadID  uuid.UUID    `json:"thread_id"`
	Content   string       `json:"content"`
	CreatedAt sql.NullTime `json:"created_at"`
	UpdatedAt sql.NullTime `json:"updated_at"`
}

func (q *Queries) ListPostsByUser(ctx context.Context, userID uuid.UUID) ([]ListPostsByUserRow, error) {
	rows, err := q.db.QueryContext(ctx, listPostsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListPostsByUserRow{}
	for rows.Next() {
		var i ListPostsByUserRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ThreadID,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePost = `-- name: UpdatePost :one
UPDATE posts
SET content = $2, updated_at = NOW()
WHERE id = $1
RETURNING id, user_id, thread_id, content, created_at, updated_at
`

type UpdatePostParams struct {
	ID      uuid.UUID `json:"id"`
	Content string    `json:"content"`
}

type UpdatePostRow struct {
	ID        uuid.UUID    `json:"id"`
	UserID    uuid.UUID    `json:"user_id"`
	ThreadID  uuid.UUID    `json:"thread_id"`
	Content   string       `json:"content"`
	CreatedAt sql.NullTime `json:"created_at"`
	UpdatedAt sql.NullTime `json:"updated_at"`
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (UpdatePostRow, error) {
	row := q.db.QueryRowContext(ctx, updatePost, arg.ID, arg.Content)
	var i UpdatePostRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ThreadID,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
