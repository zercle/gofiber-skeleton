// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: post.sql

package entity

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countPostsByStatus = `-- name: CountPostsByStatus :one
SELECT
    status,
    COUNT(*) as count
FROM posts
GROUP BY status
`

type CountPostsByStatusRow struct {
	Status string `json:"status"`
	Count  int64  `json:"count"`
}

func (q *Queries) CountPostsByStatus(ctx context.Context) (CountPostsByStatusRow, error) {
	row := q.db.QueryRow(ctx, countPostsByStatus)
	var i CountPostsByStatusRow
	err := row.Scan(&i.Status, &i.Count)
	return i, err
}

const createPost = `-- name: CreatePost :one
INSERT INTO posts (id, title, content, status, user_id, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, title, content, status, user_id, created_at, updated_at
`

type CreatePostParams struct {
	ID        pgtype.UUID        `json:"id"`
	Title     string             `json:"title"`
	Content   string             `json:"content"`
	Status    string             `json:"status"`
	UserID    pgtype.UUID        `json:"user_id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRow(ctx, createPost,
		arg.ID,
		arg.Title,
		arg.Content,
		arg.Status,
		arg.UserID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Status,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM posts WHERE id = $1
`

func (q *Queries) DeletePost(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deletePost, id)
	return err
}

const getAllPosts = `-- name: GetAllPosts :many
SELECT p.id, p.title, p.content, p.status, p.user_id, p.created_at, p.updated_at, u.full_name, u.email
FROM posts p
JOIN users u ON p.user_id = u.id
ORDER BY p.created_at DESC
LIMIT $1 OFFSET $2
`

type GetAllPostsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetAllPostsRow struct {
	ID        pgtype.UUID        `json:"id"`
	Title     string             `json:"title"`
	Content   string             `json:"content"`
	Status    string             `json:"status"`
	UserID    pgtype.UUID        `json:"user_id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	FullName  string             `json:"full_name"`
	Email     string             `json:"email"`
}

func (q *Queries) GetAllPosts(ctx context.Context, arg GetAllPostsParams) ([]GetAllPostsRow, error) {
	rows, err := q.db.Query(ctx, getAllPosts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllPostsRow
	for rows.Next() {
		var i GetAllPostsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.Status,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FullName,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDraftPostsByUserID = `-- name: GetDraftPostsByUserID :many
SELECT id, title, content, status, user_id, created_at, updated_at FROM posts
WHERE user_id = $1 AND status = 'draft'
ORDER BY created_at DESC
`

func (q *Queries) GetDraftPostsByUserID(ctx context.Context, userID pgtype.UUID) ([]Post, error) {
	rows, err := q.db.Query(ctx, getDraftPostsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.Status,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostByID = `-- name: GetPostByID :one
SELECT id, title, content, status, user_id, created_at, updated_at FROM posts WHERE id = $1
`

func (q *Queries) GetPostByID(ctx context.Context, id pgtype.UUID) (Post, error) {
	row := q.db.QueryRow(ctx, getPostByID, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Status,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPostsByUserID = `-- name: GetPostsByUserID :many
SELECT id, title, content, status, user_id, created_at, updated_at FROM posts WHERE user_id = $1 ORDER BY created_at DESC
`

func (q *Queries) GetPostsByUserID(ctx context.Context, userID pgtype.UUID) ([]Post, error) {
	rows, err := q.db.Query(ctx, getPostsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.Status,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostsWithAuthor = `-- name: GetPostsWithAuthor :many
SELECT p.id, p.title, p.content, p.status, p.user_id, p.created_at, p.updated_at, u.full_name, u.email
FROM posts p
JOIN users u ON p.user_id = u.id
WHERE p.status = 'published'
ORDER BY p.created_at DESC
LIMIT $1 OFFSET $2
`

type GetPostsWithAuthorParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetPostsWithAuthorRow struct {
	ID        pgtype.UUID        `json:"id"`
	Title     string             `json:"title"`
	Content   string             `json:"content"`
	Status    string             `json:"status"`
	UserID    pgtype.UUID        `json:"user_id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	FullName  string             `json:"full_name"`
	Email     string             `json:"email"`
}

func (q *Queries) GetPostsWithAuthor(ctx context.Context, arg GetPostsWithAuthorParams) ([]GetPostsWithAuthorRow, error) {
	rows, err := q.db.Query(ctx, getPostsWithAuthor, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsWithAuthorRow
	for rows.Next() {
		var i GetPostsWithAuthorRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.Status,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FullName,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPublishedPostsByUserID = `-- name: GetPublishedPostsByUserID :many
SELECT id, title, content, status, user_id, created_at, updated_at FROM posts
WHERE user_id = $1 AND status = 'published'
ORDER BY created_at DESC
`

func (q *Queries) GetPublishedPostsByUserID(ctx context.Context, userID pgtype.UUID) ([]Post, error) {
	rows, err := q.db.Query(ctx, getPublishedPostsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.Status,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserPostStats = `-- name: GetUserPostStats :one
SELECT
    COUNT(*) as total_posts,
    COUNT(CASE WHEN status = 'published' THEN 1 END) as published_posts,
    COUNT(CASE WHEN status = 'draft' THEN 1 END) as draft_posts,
    MAX(created_at) as last_post_date
FROM posts
WHERE user_id = $1
`

type GetUserPostStatsRow struct {
	TotalPosts     int64 `json:"total_posts"`
	PublishedPosts int64 `json:"published_posts"`
	DraftPosts     int64 `json:"draft_posts"`
	LastPostDate   any   `json:"last_post_date"`
}

func (q *Queries) GetUserPostStats(ctx context.Context, userID pgtype.UUID) (GetUserPostStatsRow, error) {
	row := q.db.QueryRow(ctx, getUserPostStats, userID)
	var i GetUserPostStatsRow
	err := row.Scan(
		&i.TotalPosts,
		&i.PublishedPosts,
		&i.DraftPosts,
		&i.LastPostDate,
	)
	return i, err
}

const searchPosts = `-- name: SearchPosts :many
SELECT p.id, p.title, p.content, p.status, p.user_id, p.created_at, p.updated_at, u.full_name, u.email
FROM posts p
JOIN users u ON p.user_id = u.id
WHERE (p.title ILIKE $1 OR p.content ILIKE $1)
  AND p.status = $2
ORDER BY p.created_at DESC
LIMIT $3 OFFSET $4
`

type SearchPostsParams struct {
	Title  string `json:"title"`
	Status string `json:"status"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

type SearchPostsRow struct {
	ID        pgtype.UUID        `json:"id"`
	Title     string             `json:"title"`
	Content   string             `json:"content"`
	Status    string             `json:"status"`
	UserID    pgtype.UUID        `json:"user_id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	FullName  string             `json:"full_name"`
	Email     string             `json:"email"`
}

func (q *Queries) SearchPosts(ctx context.Context, arg SearchPostsParams) ([]SearchPostsRow, error) {
	rows, err := q.db.Query(ctx, searchPosts,
		arg.Title,
		arg.Status,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SearchPostsRow
	for rows.Next() {
		var i SearchPostsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.Status,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FullName,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePost = `-- name: UpdatePost :one
UPDATE posts
SET title = $2, content = $3, status = $4, updated_at = $5
WHERE id = $1
RETURNING id, title, content, status, user_id, created_at, updated_at
`

type UpdatePostParams struct {
	ID        pgtype.UUID        `json:"id"`
	Title     string             `json:"title"`
	Content   string             `json:"content"`
	Status    string             `json:"status"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (Post, error) {
	row := q.db.QueryRow(ctx, updatePost,
		arg.ID,
		arg.Title,
		arg.Content,
		arg.Status,
		arg.UpdatedAt,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Status,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
