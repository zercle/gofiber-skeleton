// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/domains/posts/repositories/interface.go
//
// Generated by this command:
//
//	mockgen -source ./internal/domains/posts/repositories/interface.go -destination ./internal/domains/posts/mocks/mock_repository.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	entities "github.com/zercle/gofiber-skeleton/internal/domains/posts/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockPostRepository is a mock of PostRepository interface.
type MockPostRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPostRepositoryMockRecorder
	isgomock struct{}
}

// MockPostRepositoryMockRecorder is the mock recorder for MockPostRepository.
type MockPostRepositoryMockRecorder struct {
	mock *MockPostRepository
}

// NewMockPostRepository creates a new mock instance.
func NewMockPostRepository(ctrl *gomock.Controller) *MockPostRepository {
	mock := &MockPostRepository{ctrl: ctrl}
	mock.recorder = &MockPostRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostRepository) EXPECT() *MockPostRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPostRepository) Create(ctx context.Context, post *entities.Post) (*entities.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, post)
	ret0, _ := ret[0].(*entities.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPostRepositoryMockRecorder) Create(ctx, post any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPostRepository)(nil).Create), ctx, post)
}

// Delete mocks base method.
func (m *MockPostRepository) Delete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPostRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPostRepository)(nil).Delete), ctx, id)
}

// GetByID mocks base method.
func (m *MockPostRepository) GetByID(ctx context.Context, id uuid.UUID) (*entities.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*entities.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockPostRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockPostRepository)(nil).GetByID), ctx, id)
}

// GetBySlug mocks base method.
func (m *MockPostRepository) GetBySlug(ctx context.Context, slug string) (*entities.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySlug", ctx, slug)
	ret0, _ := ret[0].(*entities.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySlug indicates an expected call of GetBySlug.
func (mr *MockPostRepositoryMockRecorder) GetBySlug(ctx, slug any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySlug", reflect.TypeOf((*MockPostRepository)(nil).GetBySlug), ctx, slug)
}

// List mocks base method.
func (m *MockPostRepository) List(ctx context.Context, limit, offset int, isPublished *bool) ([]*entities.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, limit, offset, isPublished)
	ret0, _ := ret[0].([]*entities.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockPostRepositoryMockRecorder) List(ctx, limit, offset, isPublished any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPostRepository)(nil).List), ctx, limit, offset, isPublished)
}

// ListByUser mocks base method.
func (m *MockPostRepository) ListByUser(ctx context.Context, userID uuid.UUID, limit, offset int) ([]*entities.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByUser", ctx, userID, limit, offset)
	ret0, _ := ret[0].([]*entities.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByUser indicates an expected call of ListByUser.
func (mr *MockPostRepositoryMockRecorder) ListByUser(ctx, userID, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByUser", reflect.TypeOf((*MockPostRepository)(nil).ListByUser), ctx, userID, limit, offset)
}

// Publish mocks base method.
func (m *MockPostRepository) Publish(ctx context.Context, id uuid.UUID) (*entities.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, id)
	ret0, _ := ret[0].(*entities.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Publish indicates an expected call of Publish.
func (mr *MockPostRepositoryMockRecorder) Publish(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockPostRepository)(nil).Publish), ctx, id)
}

// Unpublish mocks base method.
func (m *MockPostRepository) Unpublish(ctx context.Context, id uuid.UUID) (*entities.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unpublish", ctx, id)
	ret0, _ := ret[0].(*entities.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unpublish indicates an expected call of Unpublish.
func (mr *MockPostRepositoryMockRecorder) Unpublish(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unpublish", reflect.TypeOf((*MockPostRepository)(nil).Unpublish), ctx, id)
}

// Update mocks base method.
func (m *MockPostRepository) Update(ctx context.Context, post *entities.Post) (*entities.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, post)
	ret0, _ := ret[0].(*entities.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockPostRepositoryMockRecorder) Update(ctx, post any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPostRepository)(nil).Update), ctx, post)
}
