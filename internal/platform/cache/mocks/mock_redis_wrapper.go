// Code generated by MockGen. DO NOT EDIT.
// Source: redis_wrapper.go
//
// Generated by this command:
//
//	mockgen -source=redis_wrapper.go -destination=mocks/mock_redis_wrapper.go -package=mocks CacheWrapper
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockCacheWrapper is a mock of CacheWrapper interface.
type MockCacheWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockCacheWrapperMockRecorder
	isgomock struct{}
}

// MockCacheWrapperMockRecorder is the mock recorder for MockCacheWrapper.
type MockCacheWrapperMockRecorder struct {
	mock *MockCacheWrapper
}

// NewMockCacheWrapper creates a new mock instance.
func NewMockCacheWrapper(ctrl *gomock.Controller) *MockCacheWrapper {
	mock := &MockCacheWrapper{ctrl: ctrl}
	mock.recorder = &MockCacheWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheWrapper) EXPECT() *MockCacheWrapperMockRecorder {
	return m.recorder
}

// Del mocks base method.
func (m *MockCacheWrapper) Del(ctx context.Context, keys ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Del", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Del indicates an expected call of Del.
func (mr *MockCacheWrapperMockRecorder) Del(ctx any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockCacheWrapper)(nil).Del), varargs...)
}

// Get mocks base method.
func (m *MockCacheWrapper) Get(ctx context.Context, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCacheWrapperMockRecorder) Get(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCacheWrapper)(nil).Get), ctx, key)
}

// Set mocks base method.
func (m *MockCacheWrapper) Set(ctx context.Context, key string, value any, expiration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value, expiration)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockCacheWrapperMockRecorder) Set(ctx, key, value, expiration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCacheWrapper)(nil).Set), ctx, key, value, expiration)
}
