// Code generated by MockGen. DO NOT EDIT.
// Source: url_usecase.go
//
// Generated by this command:
//
//	mockgen -source=url_usecase.go -destination=mocks/mock_url_usecase.go -package=mocks URLUseCase
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	entities "gofiber-skeleton/internal/entities"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockURLUseCase is a mock of URLUseCase interface.
type MockURLUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockURLUseCaseMockRecorder
	isgomock struct{}
}

// MockURLUseCaseMockRecorder is the mock recorder for MockURLUseCase.
type MockURLUseCaseMockRecorder struct {
	mock *MockURLUseCase
}

// NewMockURLUseCase creates a new mock instance.
func NewMockURLUseCase(ctrl *gomock.Controller) *MockURLUseCase {
	mock := &MockURLUseCase{ctrl: ctrl}
	mock.recorder = &MockURLUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLUseCase) EXPECT() *MockURLUseCaseMockRecorder {
	return m.recorder
}

// CreateShortURL mocks base method.
func (m *MockURLUseCase) CreateShortURL(ctx context.Context, originalURL string, userID uuid.UUID, customShortCode string) (*entities.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShortURL", ctx, originalURL, userID, customShortCode)
	ret0, _ := ret[0].(*entities.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateShortURL indicates an expected call of CreateShortURL.
func (mr *MockURLUseCaseMockRecorder) CreateShortURL(ctx, originalURL, userID, customShortCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShortURL", reflect.TypeOf((*MockURLUseCase)(nil).CreateShortURL), ctx, originalURL, userID, customShortCode)
}

// DeleteShortURL mocks base method.
func (m *MockURLUseCase) DeleteShortURL(ctx context.Context, userID, urlID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteShortURL", ctx, userID, urlID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteShortURL indicates an expected call of DeleteShortURL.
func (mr *MockURLUseCaseMockRecorder) DeleteShortURL(ctx, userID, urlID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteShortURL", reflect.TypeOf((*MockURLUseCase)(nil).DeleteShortURL), ctx, userID, urlID)
}

// GenerateQRCode mocks base method.
func (m *MockURLUseCase) GenerateQRCode(ctx context.Context, shortCode string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateQRCode", ctx, shortCode)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateQRCode indicates an expected call of GenerateQRCode.
func (mr *MockURLUseCaseMockRecorder) GenerateQRCode(ctx, shortCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateQRCode", reflect.TypeOf((*MockURLUseCase)(nil).GenerateQRCode), ctx, shortCode)
}

// GetOriginalURL mocks base method.
func (m *MockURLUseCase) GetOriginalURL(ctx context.Context, shortCode string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOriginalURL", ctx, shortCode)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOriginalURL indicates an expected call of GetOriginalURL.
func (mr *MockURLUseCaseMockRecorder) GetOriginalURL(ctx, shortCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOriginalURL", reflect.TypeOf((*MockURLUseCase)(nil).GetOriginalURL), ctx, shortCode)
}

// GetUserURLs mocks base method.
func (m *MockURLUseCase) GetUserURLs(ctx context.Context, userID uuid.UUID) ([]*entities.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserURLs", ctx, userID)
	ret0, _ := ret[0].([]*entities.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserURLs indicates an expected call of GetUserURLs.
func (mr *MockURLUseCaseMockRecorder) GetUserURLs(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserURLs", reflect.TypeOf((*MockURLUseCase)(nil).GetUserURLs), ctx, userID)
}

// UpdateShortURL mocks base method.
func (m *MockURLUseCase) UpdateShortURL(ctx context.Context, userID, urlID uuid.UUID, newOriginalURL string) (*entities.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateShortURL", ctx, userID, urlID, newOriginalURL)
	ret0, _ := ret[0].(*entities.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateShortURL indicates an expected call of UpdateShortURL.
func (mr *MockURLUseCaseMockRecorder) UpdateShortURL(ctx, userID, urlID, newOriginalURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateShortURL", reflect.TypeOf((*MockURLUseCase)(nil).UpdateShortURL), ctx, userID, urlID, newOriginalURL)
}
