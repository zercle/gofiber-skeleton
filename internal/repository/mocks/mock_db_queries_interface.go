// Code generated by MockGen. DO NOT EDIT.
// Source: db_interfaces.go
//
// Generated by this command:
//
//	mockgen -source=db_interfaces.go -destination=mocks/mock_db_queries_interface.go -package=mocks DBQueriesInterface
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	db "gofiber-skeleton/internal/repository/db"
	reflect "reflect"

	pgtype "github.com/jackc/pgx/v5/pgtype"
	gomock "go.uber.org/mock/gomock"
)

// MockDBQueriesInterface is a mock of DBQueriesInterface interface.
type MockDBQueriesInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDBQueriesInterfaceMockRecorder
	isgomock struct{}
}

// MockDBQueriesInterfaceMockRecorder is the mock recorder for MockDBQueriesInterface.
type MockDBQueriesInterfaceMockRecorder struct {
	mock *MockDBQueriesInterface
}

// NewMockDBQueriesInterface creates a new mock instance.
func NewMockDBQueriesInterface(ctrl *gomock.Controller) *MockDBQueriesInterface {
	mock := &MockDBQueriesInterface{ctrl: ctrl}
	mock.recorder = &MockDBQueriesInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBQueriesInterface) EXPECT() *MockDBQueriesInterfaceMockRecorder {
	return m.recorder
}

// CreateURL mocks base method.
func (m *MockDBQueriesInterface) CreateURL(ctx context.Context, arg db.CreateURLParams) (db.Url, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateURL", ctx, arg)
	ret0, _ := ret[0].(db.Url)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateURL indicates an expected call of CreateURL.
func (mr *MockDBQueriesInterfaceMockRecorder) CreateURL(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateURL", reflect.TypeOf((*MockDBQueriesInterface)(nil).CreateURL), ctx, arg)
}

// CreateUser mocks base method.
func (m *MockDBQueriesInterface) CreateUser(ctx context.Context, arg db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, arg)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockDBQueriesInterfaceMockRecorder) CreateUser(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockDBQueriesInterface)(nil).CreateUser), ctx, arg)
}

// DeleteURL mocks base method.
func (m *MockDBQueriesInterface) DeleteURL(ctx context.Context, id pgtype.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteURL", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteURL indicates an expected call of DeleteURL.
func (mr *MockDBQueriesInterfaceMockRecorder) DeleteURL(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteURL", reflect.TypeOf((*MockDBQueriesInterface)(nil).DeleteURL), ctx, id)
}

// GetURLByID mocks base method.
func (m *MockDBQueriesInterface) GetURLByID(ctx context.Context, id pgtype.UUID) (db.Url, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURLByID", ctx, id)
	ret0, _ := ret[0].(db.Url)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURLByID indicates an expected call of GetURLByID.
func (mr *MockDBQueriesInterfaceMockRecorder) GetURLByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURLByID", reflect.TypeOf((*MockDBQueriesInterface)(nil).GetURLByID), ctx, id)
}

// GetURLByShortCode mocks base method.
func (m *MockDBQueriesInterface) GetURLByShortCode(ctx context.Context, shortCode string) (db.Url, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURLByShortCode", ctx, shortCode)
	ret0, _ := ret[0].(db.Url)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURLByShortCode indicates an expected call of GetURLByShortCode.
func (mr *MockDBQueriesInterfaceMockRecorder) GetURLByShortCode(ctx, shortCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURLByShortCode", reflect.TypeOf((*MockDBQueriesInterface)(nil).GetURLByShortCode), ctx, shortCode)
}

// GetURLsByUserID mocks base method.
func (m *MockDBQueriesInterface) GetURLsByUserID(ctx context.Context, userID pgtype.UUID) ([]db.Url, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURLsByUserID", ctx, userID)
	ret0, _ := ret[0].([]db.Url)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURLsByUserID indicates an expected call of GetURLsByUserID.
func (mr *MockDBQueriesInterfaceMockRecorder) GetURLsByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURLsByUserID", reflect.TypeOf((*MockDBQueriesInterface)(nil).GetURLsByUserID), ctx, userID)
}

// GetUserByID mocks base method.
func (m *MockDBQueriesInterface) GetUserByID(ctx context.Context, id pgtype.UUID) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockDBQueriesInterfaceMockRecorder) GetUserByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockDBQueriesInterface)(nil).GetUserByID), ctx, id)
}

// GetUserByUsername mocks base method.
func (m *MockDBQueriesInterface) GetUserByUsername(ctx context.Context, username string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", ctx, username)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockDBQueriesInterfaceMockRecorder) GetUserByUsername(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockDBQueriesInterface)(nil).GetUserByUsername), ctx, username)
}

// UpdateURL mocks base method.
func (m *MockDBQueriesInterface) UpdateURL(ctx context.Context, arg db.UpdateURLParams) (db.Url, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateURL", ctx, arg)
	ret0, _ := ret[0].(db.Url)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateURL indicates an expected call of UpdateURL.
func (mr *MockDBQueriesInterfaceMockRecorder) UpdateURL(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateURL", reflect.TypeOf((*MockDBQueriesInterface)(nil).UpdateURL), ctx, arg)
}
