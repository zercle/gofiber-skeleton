// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package db

import (
	"context"

	"github.com/gofrs/uuid"
)

const createURL = `-- name: CreateURL :one
INSERT INTO urls (id, user_id, short_code, long_url) VALUES ($1, $2, $3, $4) RETURNING id, user_id, short_code, long_url, created_at
`

type CreateURLParams struct {
	ID        uuid.UUID
	UserID    uuid.NullUUID
	ShortCode string
	LongUrl   string
}

func (q *Queries) CreateURL(ctx context.Context, arg CreateURLParams) (Url, error) {
	row := q.db.QueryRow(ctx, createURL,
		arg.ID,
		arg.UserID,
		arg.ShortCode,
		arg.LongUrl,
	)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ShortCode,
		&i.LongUrl,
		&i.CreatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, username, password) VALUES ($1, $2, $3) RETURNING id, username, password, created_at
`

type CreateUserParams struct {
	ID       uuid.UUID
	Username string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.ID, arg.Username, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const deleteURL = `-- name: DeleteURL :exec
DELETE FROM urls WHERE id = $1 AND user_id = $2
`

type DeleteURLParams struct {
	ID     uuid.UUID
	UserID uuid.NullUUID
}

func (q *Queries) DeleteURL(ctx context.Context, arg DeleteURLParams) error {
	_, err := q.db.Exec(ctx, deleteURL, arg.ID, arg.UserID)
	return err
}

const getURLByShortCode = `-- name: GetURLByShortCode :one
SELECT id, user_id, short_code, long_url, created_at FROM urls WHERE short_code = $1
`

func (q *Queries) GetURLByShortCode(ctx context.Context, shortCode string) (Url, error) {
	row := q.db.QueryRow(ctx, getURLByShortCode, shortCode)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ShortCode,
		&i.LongUrl,
		&i.CreatedAt,
	)
	return i, err
}

const getURLsByUserID = `-- name: GetURLsByUserID :many
SELECT id, user_id, short_code, long_url, created_at FROM urls WHERE user_id = $1
`

func (q *Queries) GetURLsByUserID(ctx context.Context, userID uuid.NullUUID) ([]Url, error) {
	rows, err := q.db.Query(ctx, getURLsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Url
	for rows.Next() {
		var i Url
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ShortCode,
			&i.LongUrl,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, password, created_at FROM users WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}
