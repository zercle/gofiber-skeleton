// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "swagger": "2.0",
    "info": {
        "title": "Go Fiber Microservice API",
        "description": "Production-ready microservice template built with Go, Fiber, and Clean Architecture",
        "version": "1.0.0",
        "contact": {
            "name": "API Support",
            "url": "https://github.com/zercle/template-go-fiber"
        },
        "license": {
            "name": "MIT"
        }
    },
    "basePath": "/api",
    "paths": {
        "/users/register": {
            "post": {
                "summary": "Register a new user",
                "description": "Create a new user account with email and password",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "tags": ["Users"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User registered successfully",
                        "schema": {
                            "$ref": "#/definitions/UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "409": {
                        "description": "Email already registered"
                    }
                }
            }
        },
        "/users": {
            "get": {
                "summary": "List users",
                "description": "Retrieve a paginated list of users",
                "produces": ["application/json"],
                "tags": ["Users"],
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "default": 10
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "type": "integer",
                        "default": 0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of users",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/UserResponse"
                            }
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "summary": "Get user by ID",
                "description": "Retrieve a user's information by their ID",
                "produces": ["application/json"],
                "tags": ["Users"],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User information",
                        "schema": {
                            "$ref": "#/definitions/UserResponse"
                        }
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            },
            "put": {
                "summary": "Update user",
                "description": "Update an existing user's information",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "tags": ["Users"],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User updated successfully",
                        "schema": {
                            "$ref": "#/definitions/UserResponse"
                        }
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            },
            "delete": {
                "summary": "Delete user",
                "description": "Delete an existing user account",
                "tags": ["Users"],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "User deleted successfully"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            }
        }
    },
    "definitions": {
        "CreateUserRequest": {
            "type": "object",
            "required": ["email", "password"],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "password": {
                    "type": "string",
                    "example": "password123",
                    "minLength": 8
                },
                "first_name": {
                    "type": "string",
                    "example": "John"
                },
                "last_name": {
                    "type": "string",
                    "example": "Doe"
                }
            }
        },
        "UpdateUserRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "newemail@example.com"
                },
                "first_name": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                }
            }
        },
        "UserResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "first_name": {
                    "type": "string",
                    "example": "John"
                },
                "last_name": {
                    "type": "string",
                    "example": "Doe"
                },
                "is_active": {
                    "type": "boolean",
                    "example": true
                },
                "created_at": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2025-10-25T12:00:00Z"
                },
                "updated_at": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2025-10-25T12:00:00Z"
                }
            }
        }
    }
}`

// SwaggerInfo is exported and contains brief info about generated code
var SwaggerInfo = struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
	InfoInstanceName string
}{
	Version:     "1.0.0",
	Host:        "localhost:3000",
	BasePath:    "/api",
	Schemes:     []string{"http", "https"},
	Title:       "Go Fiber Microservice API",
	Description: "Production-ready microservice template built with Go, Fiber, and Clean Architecture",
	InfoInstanceName: "swagger",
}

func init() {
	swag.Register(SwaggerInfo.InfoInstanceName, &swag.Spec{
		Version:          SwaggerInfo.Version,
		Host:             SwaggerInfo.Host,
		BasePath:         SwaggerInfo.BasePath,
		Schemes:          SwaggerInfo.Schemes,
		Title:            SwaggerInfo.Title,
		Description:      SwaggerInfo.Description,
		InfoInstanceName: SwaggerInfo.InfoInstanceName,
		SwaggerTemplate:  docTemplate,
	})
}
