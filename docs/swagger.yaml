basePath: /api/v1
definitions:
  handler.createPostRequest:
    properties:
      content:
        type: string
      thread_id:
        type: string
    required:
    - content
    - thread_id
    type: object
  handler.loginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  handler.registerRequest:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
  handler.updatePostRequest:
    properties:
      content:
        type: string
    required:
    - content
    type: object
  response.JSendResponse:
    properties:
      code:
        type: integer
      data: {}
      message:
        type: string
      status:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: Production-ready Go backend template using Fiber v2 framework with
    Clean Architecture
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Go Fiber Skeleton API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.loginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful with JWT token
          schema:
            $ref: '#/definitions/response.JSendResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.JSendResponse'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/response.JSendResponse'
      summary: User login
      tags:
      - authentication
  /auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user account with username, email, and password
      parameters:
      - description: Registration details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.registerRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            $ref: '#/definitions/response.JSendResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.JSendResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.JSendResponse'
      summary: Register a new user
      tags:
      - authentication
  /posts:
    post:
      consumes:
      - application/json
      description: Create a new post in a thread (requires authentication)
      parameters:
      - description: Post details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.createPostRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Post created successfully
          schema:
            $ref: '#/definitions/response.JSendResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.JSendResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.JSendResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.JSendResponse'
      security:
      - BearerAuth: []
      summary: Create a new post
      tags:
      - posts
  /posts/{id}:
    delete:
      description: Delete an existing post (requires authentication and ownership)
      parameters:
      - description: Post ID (UUID)
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: Post deleted successfully
        "400":
          description: Invalid post ID
          schema:
            $ref: '#/definitions/response.JSendResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.JSendResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.JSendResponse'
      security:
      - BearerAuth: []
      summary: Delete a post
      tags:
      - posts
    get:
      description: Retrieve a single post by its ID
      parameters:
      - description: Post ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Post retrieved successfully
          schema:
            $ref: '#/definitions/response.JSendResponse'
        "400":
          description: Invalid post ID
          schema:
            $ref: '#/definitions/response.JSendResponse'
        "404":
          description: Post not found
          schema:
            $ref: '#/definitions/response.JSendResponse'
      summary: Get a post by ID
      tags:
      - posts
    put:
      consumes:
      - application/json
      description: Update an existing post (requires authentication and ownership)
      parameters:
      - description: Post ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: Updated post content
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.updatePostRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Post updated successfully
          schema:
            $ref: '#/definitions/response.JSendResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.JSendResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.JSendResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.JSendResponse'
      security:
      - BearerAuth: []
      summary: Update a post
      tags:
      - posts
  /users/{user_id}/posts:
    get:
      description: Retrieve all posts created by a specific user
      parameters:
      - description: User ID (UUID)
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Posts retrieved successfully
          schema:
            $ref: '#/definitions/response.JSendResponse'
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/response.JSendResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.JSendResponse'
      summary: List posts by user
      tags:
      - posts
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
