package main

import (
	"fmt"
	"log"
	"net"
	"os"
	"os/signal"
	"syscall"

	"gofiber-skeleton/internal/infra/app"
	"gofiber-skeleton/internal/infra/auth"
	"gofiber-skeleton/internal/infra/config"
	"gofiber-skeleton/internal/infra/database"
	"gofiber-skeleton/internal/order"
	"gofiber-skeleton/internal/product"
	"gofiber-skeleton/internal/user"

	"google.golang.org/grpc"

	_ "gofiber-skeleton/docs" // docs is generated by Swag CLI, you have to import it.
)

var (
	version string
	build   string
)

func main() {
	migrationsPath := "./database/migrations"
	fiberApp := app.SetupApp(migrationsPath)
	cfg, err := config.LoadConfig()
	if err != nil {
		log.Fatalf("Error loading config: %v", err)
	}

	db := database.ConnectDB(cfg.DATABASE_URL)

	// Initialize JWT Service
	jwtService := auth.NewJWTService(cfg.JWT_SECRET_KEY, 0) // 0 uses default TTL

	// Setup gRPC Server
	grpcPort := cfg.GRPC_PORT // You can make this configurable
	lis, err := net.Listen("tcp", fmt.Sprintf(":%s", grpcPort))
	if err != nil {
		log.Fatalf("failed to listen: %v", err)
	}
	grpcServer := grpc.NewServer()

	// Initialize and register all modules
	user.RegisterModule(fiberApp, grpcServer, db, jwtService)
	product.RegisterModule(fiberApp, grpcServer, db, jwtService)
	order.RegisterModule(fiberApp, grpcServer, db, jwtService)

	// Start gRPC server in a goroutine
	go func() {
		log.Printf("gRPC server listening on port %s", grpcPort)
		if err := grpcServer.Serve(lis); err != nil {
			log.Fatalf("failed to serve gRPC: %v", err)
		}
	}()

	// Start Fiber app in a goroutine
	go func() {
		log.Printf("App version: %s, build: %s", version, build)
		if err := fiberApp.Listen(fmt.Sprintf(":%s", cfg.APP_PORT)); err != nil {
			log.Fatalf("failed to serve Fiber: %v", err)
		}
	}()

	// Graceful shutdown
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit

	log.Println("Shutting down servers...")

	// Shutdown gRPC server
	grpcServer.GracefulStop()
	log.Println("gRPC server stopped.")

	// Shutdown Fiber app
	if err := fiberApp.Shutdown(); err != nil {
		log.Fatalf("Fiber app shutdown error: %v", err)
	}
	log.Println("Fiber app stopped.")

	log.Println("Servers gracefully stopped.")
}
