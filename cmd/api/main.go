package main

import (
	"context"
	"fmt"
	"log"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/gofiber/fiber/v2"
	"github.com/jackc/pgx/v5/pgxpool"

	"gofiber-skeleton/internal/configs"
	"gofiber-skeleton/internal/delivery/http"
	"gofiber-skeleton/internal/repository"
	"gofiber-skeleton/internal/repository/db"
	"gofiber-skeleton/internal/usecases"

	_ "gofiber-skeleton/docs" // docs is generated by Swag CLI, you have to import it.
)

// @title Go URL Shortener Service API
// @version 1.0
// @description This is a sample URL shortener service.
// @termsOfService http://swagger.io/terms/

// @contact.name API Support
// @contact.url http://www.swagger.io/support
// @contact.email support@swagger.io

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @host localhost:8080
// @BasePath /api

// @securityDefinitions.apikey ApiKeyAuth
// @in header
// @name Authorization
func main() {
	// Load configuration
	cfg, err := configs.LoadConfig()
	if err != nil {
		log.Fatalf("Error loading config: %v", err)
	}

	// Database connection
	dbURL := fmt.Sprintf("postgres://%s:%s@%s:%d/%s?sslmode=%s",
		cfg.Database.User,
		cfg.Database.Password,
		cfg.Database.Host,
		cfg.Database.Port,
		cfg.Database.DBName,
		cfg.Database.SSLMode)

	pool, err := pgxpool.New(context.Background(), dbURL)
	if err != nil {
		log.Fatal(err)
	}
	defer pool.Close()

	// Create dependencies
	queries := db.New(pool)
	repo := repository.NewPostgresRepository(queries)
	userUsecase := usecases.NewUserUsecase(repo)
	urlUsecase := usecases.NewURLUsecase(repo)
	h := http.NewHandler(userUsecase, urlUsecase)

	app := fiber.New()

	// Register routes
	h.Register(app)

	// Start server in a goroutine
	go func() {
		if err := app.Listen(fmt.Sprintf(":%d", cfg.Server.Port)); err != nil {
			log.Fatalf("Error starting server: %v", err)
		}
	}()

	// Graceful shutdown
	c := make(chan os.Signal, 1)
	signal.Notify(c, os.Interrupt, syscall.SIGTERM)

	_ = <-c // Block until a signal is received
	log.Println("Gracefully shutting down...")
	_ = app.ShutdownWithTimeout(10 * time.Second)

	log.Println("Server gracefully stopped")
}
